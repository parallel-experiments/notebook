{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "file",
      "value": "clojure-unknown-tool-tools.md"
    },
    {
      "type": "file",
      "value": "mongodb-mass-removing-nested-array-element-property.md"
    },
    {
      "type": "file",
      "value": "python-pydantic-unprintable-validationerror-object.md"
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "Welcome to this notebook!",
      "html": "<p>Welcome to this notebook!</p>\n",
      "id": 0
    },
    {
      "path": "clojure-unknown-tool-tools.md",
      "url": "clojure-unknown-tool-tools.html",
      "content": "# Unknown tool: tools\n\nCommonly presents as an error during an attempt to add Sean Corfield's \"new\" like so\n\n```\nclojure -Ttools install com.github.seancorfield/clj-new '{:git/tag \"v1.2.381\"}' :as new\n```\n\nand the error \n\n```Error building classpath. Unknown tool: tools```\n\n### Solution\n\n(https://clojurians-log.clojureverse.org/clj-on-windows/2022-09-01) is to create `~/.clojure/tools/tools.edn` and add in\n\n```\n{:lib io.github.clojure/tools.tools\n :coord {:git/tag \"v0.2.8\"\n         :git/sha \"9c5baa56cff02de98737a71d4dab098b268cd68b\"}}\n\n```\nor newer before re-running.\n",
      "html": "<h1 id=\"unknown-tool%3A-tools\">Unknown tool: tools <a class=\"heading-anchor-permalink\" href=\"#unknown-tool%3A-tools\">#</a></h1>\n<p>Commonly presents as an error during an attempt to add Sean Corfield’s “new” like so</p>\n<pre><code>clojure -Ttools install com.github.seancorfield/clj-new '{:git/tag &quot;v1.2.381&quot;}' :as new\n</code></pre>\n<p>and the error</p>\n<p><code>Error building classpath. Unknown tool: tools</code></p>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<p>(<a href=\"https://clojurians-log.clojureverse.org/clj-on-windows/2022-09-01\">https://clojurians-log.clojureverse.org/clj-on-windows/2022-09-01</a>) is to create <code>~/.clojure/tools/tools.edn</code> and add in</p>\n<pre><code>{:lib io.github.clojure/tools.tools\n :coord {:git/tag &quot;v0.2.8&quot;\n         :git/sha &quot;9c5baa56cff02de98737a71d4dab098b268cd68b&quot;}}\n\n</code></pre>\n<p>or newer before re-running.</p>\n",
      "id": 1
    },
    {
      "path": "mongodb-mass-removing-nested-array-element-property.md",
      "url": "mongodb-mass-removing-nested-array-element-property.html",
      "content": "# Mass removing a property from an object that's an element in an array property\n\nNoting this case because finding a solution or docs on it is not easy and the functionality is not discoverable. I myself forgot about it and had to re-find it a couple of times.\n\nScenario is when a document has a `.things` property that's an array of objects, and one of the properties (e.g. `.things[].stuff` has to be mass removed.\nUnsetting the nested property by doing an `updateOne(lookup, {$unset: {\"things.stuff\": 1}})` or `$unset: {\"things.$.stuff\": 1}` does not work.\n\n### Solution\n\nAs seen here https://www.mongodb.com/docs/manual/reference/operator/update/positional-all/\n\nThe \"all positional operator\", `$[]` indicates that the update operator should modify all elements in the specified array field.\nDoing `updateOne(lookup, {$unset: {\"things.$[].stuff\": 1}})` will successfully clean out the property from objects in the document's `.things` array.\n",
      "html": "<h1 id=\"mass-removing-a-property-from-an-object-that%E2%80%99s-an-element-in-an-array-property\">Mass removing a property from an object that’s an element in an array property <a class=\"heading-anchor-permalink\" href=\"#mass-removing-a-property-from-an-object-that%E2%80%99s-an-element-in-an-array-property\">#</a></h1>\n<p>Noting this case because finding a solution or docs on it is not easy and the functionality is not discoverable. I myself forgot about it and had to re-find it a couple of times.</p>\n<p>Scenario is when a document has a <code>.things</code> property that’s an array of objects, and one of the properties (e.g. <code>.things[].stuff</code> has to be mass removed.\nUnsetting the nested property by doing an <code>updateOne(lookup, {$unset: {&quot;things.stuff&quot;: 1}})</code> or <code>$unset: {&quot;things.$.stuff&quot;: 1}</code> does not work.</p>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<p>As seen here <a href=\"https://www.mongodb.com/docs/manual/reference/operator/update/positional-all/\">https://www.mongodb.com/docs/manual/reference/operator/update/positional-all/</a></p>\n<p>The “all positional operator”, <code>$[]</code> indicates that the update operator should modify all elements in the specified array field.\nDoing <code>updateOne(lookup, {$unset: {&quot;things.$[].stuff&quot;: 1}})</code> will successfully clean out the property from objects in the document’s <code>.things</code> array.</p>\n",
      "id": 2
    },
    {
      "path": "python-pydantic-unprintable-validationerror-object.md",
      "url": "python-pydantic-unprintable-validationerror-object.html",
      "content": "# Pydantic ValidationError with unprintable ValidationError object\n\nIn some cases (NOT always), using Pydantic in a Python project will fail with an \"unprintable\" validation error, resulting in stack breaking with an exception similar to\n\n```\npydantic.error_wrappers.ValidationError: <unprintable ValidationError object>\n```\n\nand while I couldn't find the time to exactly find what causes this and how to handle it elegantly;\n\n### Solution\n\na quick solution that I found is to try to instantiate some or any of the Pydantic types as early as possible.\nIn other words, this problem arises when\n\n```python\nfrom pydantic import BaseModel\n\nclass B(BaseModel):\n    some_property: int\n\nclass A(BaseModel):\n    b: B\n\ndef example() -> A:\n    b = {\"another_property\": None}\n    return A(**{\"b\": b}) # => raises an \"unprintable\" ValidationError with no extra info\n```\n\nmeaning that validating inner types earlier like so\n\n```python\n\ndef example() -> A:\n    b = {\"another_property\": None}\n    B(**b) # => raises a \"printable\" ValidationError, b.some_property # Field required [type=missing, input_value={'another_property': None}, input_type=dict]\n\n    return A(**{\"b\": b})\n```\n\nis a sensible approach to avoiding this type of issue.\n",
      "html": "<h1 id=\"pydantic-validationerror-with-unprintable-validationerror-object\">Pydantic ValidationError with unprintable ValidationError object <a class=\"heading-anchor-permalink\" href=\"#pydantic-validationerror-with-unprintable-validationerror-object\">#</a></h1>\n<p>In some cases (NOT always), using Pydantic in a Python project will fail with an “unprintable” validation error, resulting in stack breaking with an exception similar to</p>\n<pre><code>pydantic.error_wrappers.ValidationError: &lt;unprintable ValidationError object&gt;\n</code></pre>\n<p>and while I couldn’t find the time to exactly find what causes this and how to handle it elegantly;</p>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<p>a quick solution that I found is to try to instantiate some or any of the Pydantic types as early as possible.\nIn other words, this problem arises when</p>\n<pre><code class=\"language-python\">from pydantic import BaseModel\n\nclass B(BaseModel):\n    some_property: int\n\nclass A(BaseModel):\n    b: B\n\ndef example() -&gt; A:\n    b = {&quot;another_property&quot;: None}\n    return A(**{&quot;b&quot;: b}) # =&gt; raises an &quot;unprintable&quot; ValidationError with no extra info\n</code></pre>\n<p>meaning that validating inner types earlier like so</p>\n<pre><code class=\"language-python\">\ndef example() -&gt; A:\n    b = {&quot;another_property&quot;: None}\n    B(**b) # =&gt; raises a &quot;printable&quot; ValidationError, b.some_property # Field required [type=missing, input_value={'another_property': None}, input_type=dict]\n\n    return A(**{&quot;b&quot;: b})\n</code></pre>\n<p>is a sensible approach to avoiding this type of issue.</p>\n",
      "id": 3
    }
  ]
}